import random

class PromptTemplate:
    """
    A class to generate prompts for fine-tuning LLMs using the constitutional AI approach.

    Attributes:
        input (str): The input text for generating prompts.
        initial_answer (str): The initial answer generated by the LLM.
        critique (str): The critique of the initial answer.
        revision (str): The revised answer based on the critique.
        constitution_settings (dict): Constitution definitions for generating prompts.
        critique_request (str): Specific request for critique generation.
        revision_request (str): Specific request for revision generation.
    """

    def __init__(
        self,
        input,
        initial_answer=None,
        critique_request=None,
        critique=None,
        revision_request=None,
        revision=None,
        constitution_settings=None  # This should be a dictionary
    ):
        """
        Initializes the PromptTemplate class with the provided arguments.

        Args:
            input (str): The input text for generating prompts.
            initial_answer (str, optional): The initial answer. Defaults to None.
            critique_request (str, optional): Specific request for critique generation. Defaults to None.
            critique (str, optional): The critique of the initial answer. Defaults to None.
            revision_request (str, optional): Specific request for revision generation. Defaults to None.
            revision (str, optional): The revised answer. Defaults to None.
            constitution_settings (dict, optional): Constitution definitions for generating prompts. Defaults to a default structure.
        """
        self.input = input
        self.initial_answer = initial_answer
        self.critique = critique
        self.revision = revision
        self.constitution_settings = constitution_settings or {
            "prefix_input": "",
            "prefix_critique": "",
            "prefix_revision": "",
            "critique_revision_requests": [],
            "examples": [],
        }

        if critique_request or revision_request or len(self.constitution_settings["critique_revision_requests"]) == 0:
            self.critique_request = critique_request
            self.revision_request = revision_request
        else:
            critique_revision_request = random.choice(self.constitution_settings["critique_revision_requests"])
            self.critique_request = critique_revision_request["critique_request"]
            self.revision_request = critique_revision_request["revision_request"]

    def get_system_prompt(self, message):
        """
        Generates a system prompt with the given message.

        Args:
            message (str): The message to be included in the system prompt.

        Returns:
            list: A list containing the system prompt.
        """
        return [{
            "role": "system",
            "content": message,
        }]

    def get_prefix_input(self):
        return self.get_system_prompt(self.constitution_settings["prefix_input"])
    
    def get_prefix_critique(self):
        return self.get_system_prompt(self.constitution_settings["prefix_critique"])
    
    def get_prefix_revision(self):
        return self.get_system_prompt(self.constitution_settings["prefix_revision"])

    def generate_initial_answer_prompt(self):
        input_prompt = [{
            "role": "user",
            "content": self.input,
        }]
        return self.get_prefix_input() + input_prompt

    def generate_few_shot_critique(self):
        few_shot_critique_prompt = []
        for example in self.constitution_settings["examples"]:
            # Format the conversation history as a single string
            conversation_history = f"Human: {example.get('input', '')}\n" + \
                                   f"Assistant: {example.get('initial_answer', '')}\n\n" + \
                                   f"---\nCritiqueRequest: {example.get('critique_request', '')}"
            user_input = {
                "role": "user",
                "content": conversation_history
            }
            # Assistant's critique response
            assistant_critique = {
                "role": "assistant",
                "content": "Critique: " + example.get("critique", "")
            }
            few_shot_critique_prompt.extend([user_input, assistant_critique])
        return few_shot_critique_prompt

    def generate_critique_prompt(self):
        input_prompt = [{
            "role": "user",
            "content": f"Human: {self.input}\n"
                       f"Assistant: {self.initial_answer}\n\n"
                       f"---\nCritiqueRequest: {self.critique_request}",
        }]
        # Combine prefix, few shot examples, and input
        return self.get_prefix_critique() + self.generate_few_shot_critique() + input_prompt

    def generate_few_shot_revision(self):
        few_shot_revision_prompt = []
        for example in self.constitution_settings["examples"]:
            # Format the complete conversation history as a single string
            conversation_history = f"Human: {example.get('input', '')}\n" + \
                                   f"Assistant: {example.get('initial_answer', '')}\n" + \
                                   f"---\nCritiqueRequest: {example.get('critique_request', '')}\n" + \
                                   f"Critique: {example.get('critique', '')}\n\n" + \
                                   f"---\nRevisionRequest: {example.get('revision_request', '')}"
            user_input = {
                "role": "user",
                "content": conversation_history
            }
            # Assistant's revision response
            assistant_revision = {
                "role": "assistant",
                "content": "Revision: " + example.get("revision", "")
            }
            few_shot_revision_prompt.extend([user_input, assistant_revision])
        return few_shot_revision_prompt
    
    def generate_revision_prompt(self):
        input_prompt = [{
            "role": "user",
            "content": f"Human: {self.input}\n"
                       f"Assistant: {self.initial_answer}\n\n"
                       f"---\nCritiqueRequest: {self.critique_request}"
                       f"Critique: {self.critique}\n\n"
                       f"---\nRevisionRequest: {self.revision_request}",
        }]
        # Combine prefix, few shot examples, and input
        return self.get_prefix_revision() + self.generate_few_shot_revision() + input_prompt

    def get_history(self):
        return {
            "input": self.input,
            "initial_answer": self.initial_answer,
            "critique_request": self.critique_request,
            "critique": self.critique,
            "revision_request": self.revision_request,
            "revision": self.revision,
        }
